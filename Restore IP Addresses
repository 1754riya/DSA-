class Solution {
public:
 int n;
 vector<string>result;
   bool  isvalid(string str){
    if(str.empty()) return false;
    if(str.size()>1 && str[0]=='0') return false;
    int val=stoi(str);
    return val >= 0 &&val <= 255;
   }
   void solve(string & s, int indx,int part, string curr){
    if(indx==n && part==4){
        curr.pop_back();
        result.push_back(curr);
        return;
    }
    if(indx >= n || part >= 4) return; 
        solve(s,indx+1,part+1,curr+s.substr(indx,1)+"."); 
     if(indx+2<=n && isvalid(s.substr(indx,2))){
        solve(s,indx+2,part+1,curr+s.substr(indx,2)+"."); 
    }
     if(indx+1<=n && isvalid(s.substr(indx,3))){
        solve(s,indx+3,part+1,curr+s.substr(indx,3)+"."); 
    }
   }
   
    vector<string> restoreIpAddresses(string s) {
       string curr="";
       result.clear();
       n=s.size();
       int indx=0;
       int part=0;
       if(n>12) return {};
       solve(s,0,part,curr);
       return result;
    }
};
