class Solution {
public:
    // Helper function to insert an element into the sorted stack
    void sortedInsert(stack<int> &st, int x) {
        // Base case: stack is empty or top element is less than or equal to x
        if (st.empty() || st.top() <= x) {
            st.push(x);
            return;
        }

        // Remove top and recurse
        int top = st.top();
        st.pop();
        sortedInsert(st, x);

        // Put the top element back
        st.push(top);
    }

    // Function to sort the stack
    void sortStack(stack<int> &st) {
        // Base case: stack with 0 or 1 element is already sorted
        if (st.empty()) return;

        // Remove top and sort the rest
        int top = st.top();
        st.pop();
        sortStack(st);

        // Insert the popped element into the sorted stack
        sortedInsert(st, top);
    }
};
