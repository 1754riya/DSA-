class Solution {
  public:
    int priority (char ch){
        if(ch=='^') return 3;
        else if(ch=='*'|| ch=='/') return 2;
        else if(ch=='+'|| ch=='-') return 1;
        else return 0;
    }
    string infixToPostfix(string& s) {
        stack<char>st;
        string ans="";
        int n=s.size();
        for(char c:s){
            if(isalnum(c)){
                ans+=c;
            }
            else if(c=='('){
                st.push(c);
            }
            else if(c==')'){
                while(!st.empty() && st.top()!='('){
                    ans+=st.top();
                    st.pop();
                }
                st.pop();
            }
            else{
                while(!st.empty() &&priority(c)<=priority(st.top()) && st.top()!=')'){
                    ans+=st.top();
                    st.pop();
                }
                st.push(c);
            }
        }
        while(!st.empty()){
            ans+=st.top();
            st.pop();
        }
        return ans;
    }
};
