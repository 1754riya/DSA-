class Solution {
public:
    int priority (char ch){
        if(ch=='^') return 3;
        else if(ch=='*' || ch=='/') return 2;
        else if(ch=='+' || ch== '-') return 1;
        else return 0;

    }
    string infixToPostfix(const string& s){
        stack<char>st;
        int n=s.size();
        string ans="";
        for(char c: s){
            if(isalnum(c)){
                ans+=c;
            }
            else if(c=='('){
                st.push(c);
            }
            else if(c==')'){
                while(!st.empty() && st.top()!='('){
                    ans+=st.top(); st.pop();
                }
                st.pop();
            }
            else{
                while(!st.empty() && priority(c)<=priority(st.top()) && st.top()!='('){
                    ans+=st.top();st.pop();
                }
                st.push(c);
            }
        }
        while (!st.empty()) {
            ans+= st.top(); st.pop();
        }
        return ans;
    }
    string infixToPrefix(const string& s) {
        string expr = s;
        reverse(expr.begin(),expr.end());
        for(int i=0;i<expr.size();i++){
            if(expr[i]=='(') expr[i]=')';
            else if (expr[i]==')') expr[i] = '(';
        }
        string postfix = infixToPostfix(expr);
        reverse(postfix.begin(), postfix.end());
        return postfix;
    }
};
