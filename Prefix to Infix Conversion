// User function Template for C++

class Solution {
  public:
    string preToInfix(string pre_exp) {
      stack<string> st;

        // Traverse from right to left
        for (int i = pre_exp.length() - 1; i >= 0; i--) {
            char ch = pre_exp[i];

            if (isalnum(ch)) {
                // Operand
                st.push(string(1, ch));
            } else {
                // Operator
                if (st.size() < 2) return "Invalid";

                string op1 = st.top(); st.pop();
                string op2 = st.top(); st.pop();

                string expr = "(" + op1 + ch + op2 + ")";
                st.push(expr);
            }
        }

        return (st.size() == 1) ? st.top() : "Invalid";
    }
};
