class Solution {
public:
 pair<vector<int>,vector<int>>sumofsmaller(vector<int>& arr){
    int n=arr.size();
    stack<int>st;
    vector<int>nse(n,n);
    vector<int>pse(n,-1);
    for(int i=0; i<n;i++){
        while(!st.empty() && arr[st.top()]>=arr[i]){
            st.pop();
        }
        if(!st.empty()){
            pse[i]=st.top();
        }
        st.push(i);
    }
    while(!st.empty()) st.pop();
      for(int i=n-1; i>=0;i--){
        while(!st.empty() && arr[st.top()]>=arr[i]){
            st.pop();
        }
        if(!st.empty()){
            nse[i]=st.top();
        }
        st.push(i);
    }
    return {pse,nse};

 }

    int largestRectangleArea(vector<int>& heights) {
        auto [pse, nse] = sumofsmaller(heights);
        int maxi=0;
        for (int i=0; i<heights.size();i++) {
            maxi = max(maxi,heights[i]*(nse[i]-pse[i]-1));
        }
        return maxi;
    }

    int maximalRectangle(vector<vector<char>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        if (matrix.empty()) return 0;
        vector<int> heights(n, 0);
        int maxi=0;
        for(int i=0; i<m;i++){
            for(int j=0; j<n;j++){
                if(matrix[i][j]=='1'){
                    heights[j]++;
                }
                else{
                    heights[j]=0;
                }
            }
             maxi = max(maxi, largestRectangleArea(heights));
        }
         return maxi;
    }
};
